// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply plugin: 'com.github.ben-manes.versions'
buildscript {
    apply from: 'versions.gradle'
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath deps.android_gradle_plugin
        classpath deps.kotlin.plugin
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.0'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        jcenter()
    }
}

subprojects {
    if (project.getPlugins().hasPlugin('com.android.library')) {
        uploadArchives {
            repositories {
                mavenDeployer {
                    repository(url: "file://${buildDir}/outputs/maven")
                    pom.groupId = GROUP
                    pom.artifactId = ARTIFACT_ID
                    pom.version = VERSION
                    pom.whenConfigured { pom ->
                        println("Current Dependencies ${pom.dependencies}")
                        pom.dependencies.each { dep ->
                            println("Processing ${dep}")
                            if (dep.getVersion() == "unspecified" && dep.getGroupId() == rootProjectDir) {
                                println("Updating Dependencies")
                                dep.setGroupId(GROUP)
                                dep.setVersion(VERSION)
                                println("Updated ${dep}")
                            }
                        }
                    }
                }
            }
        }

        task sourcesJar(type: Jar) {
            classifier = 'sources'
            from android.sourceSets.main.java.srcDirs
        }

        task javadoc(type: Javadoc) {
            source = android.sourceSets.main.java.srcDirs
            classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        }


    }

}

task clean(type: Delete) {
    delete rootProject.buildDir
}

